package es.fdi.iw.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Locale;
import java.util.UUID;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import es.fdi.iw.ContextInitializer;
import es.fdi.iw.model.Author;
import es.fdi.iw.model.Book;
import es.fdi.iw.model.Genero;
import es.fdi.iw.model.User;
import es.fdi.iw.model.modificadores.ModificadorProduccion;
//import es.fdi.iw.model.modificadores.ModificadorProduccion;
import es.fdi.iw.model.pais.Pais;
import es.fdi.iw.model.pais.Recursos;
import es.fdi.iw.model.pais.construcciones.Construcciones;
import es.fdi.iw.model.pais.construcciones.TipoConstruccion;
import es.fdi.iw.model.pais.TipoRecurso;
import es.fdi.iw.model.pais.eventos.Evento;
import es.fdi.iw.model.pais.eventos.GestorEventos;
import es.fdi.iw.model.pais.eventos.TipoEvento;
import es.fdi.iw.model.pais.relaciones.ComunidadEconomica;
import es.fdi.iw.model.pais.relaciones.Pair;
import es.fdi.iw.model.politicos.ExceptionPolitico;
import es.fdi.iw.model.politicos.Politico;
import es.fdi.iw.model.usuario.ExceptionUsuario;
import es.fdi.iw.model.usuario.Rol;
import es.fdi.iw.model.usuario.TipoLider;
import es.fdi.iw.model.usuario.Usuario;
import es.fdi.iw.noticias.Noticia;

/**
 * Una aplicación de ejemplo para IW.
 */
@Controller
public class HomeController {
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);

	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * Intercepts login requests generated by the header; then continues to load
	 * normal page
	 */
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	@Transactional
	public String login(@RequestParam("login") String formLogin, @RequestParam("pass") String formPass,
			@RequestParam("source") String formSource, HttpServletRequest request, HttpServletResponse response,
			Model model, HttpSession session) {

		logger.info("Login attempt from '{}' while visiting '{}'", formLogin, formSource);

		// validate request
		if (formLogin == null || formLogin.length() < 4 || formPass == null || formPass.length() < 4) {
			model.addAttribute("loginError", "usuarios y contraseñas: 4 caracteres mínimo");
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
		} else {
			User u = null;
			try {
				u = (User) entityManager.createNamedQuery("userByLogin").setParameter("loginParam", formLogin)
						.getSingleResult();
				if (u.isPassValid(formPass)) {
					logger.info("pass was valid");
					session.setAttribute("user", u);
					// sets the anti-csrf token
					getTokenForSession(session);
				} else {
					logger.info("pass was NOT valid");
					model.addAttribute("loginError", "error en usuario o contraseña");
					response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
				}
			} catch (NoResultException nre) {
				if (formPass.length() == 4) {
					// UGLY: register new users if they do not exist and pass is
					// 4 chars long
					logger.info("no-such-user; creating user {}", formLogin);
					User user = User.createUser(formLogin, formPass, "user");
					entityManager.persist(user);
					session.setAttribute("user", user);
					// sets the anti-csrf token
					getTokenForSession(session);
				} else {
					logger.info("no such login: {}", formLogin);
				}
				model.addAttribute("loginError", "error en usuario o contraseña");
			}
		}

		// redirects to view from which login was requested
		return "redirect:" + formSource;
	}

	/**
	 * Delete a user; return JSON indicating success or failure
	 */
	@RequestMapping(value = "/delUser", method = RequestMethod.POST)
	@ResponseBody
	@Transactional // needed to allow DB change
	public ResponseEntity<String> bookAuthors(@RequestParam("id") long id, @RequestParam("csrf") String token,
			HttpSession session) {
		if (!isAdmin(session) || !isTokenValid(session, token)) {
			return new ResponseEntity<String>("Error: no such user or bad auth", HttpStatus.FORBIDDEN);
		} else if (entityManager.createNamedQuery("delUser").setParameter("idParam", id).executeUpdate() == 1) {
			return new ResponseEntity<String>("Ok: user " + id + " removed", HttpStatus.OK);
		}
		return new ResponseEntity<String>("Error: no such user", HttpStatus.BAD_REQUEST);
		
	}

	/**
	 * Logout (also returns to home view).
	 */
	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	public String logout(HttpSession session) {
		logger.info("User '{}' logged out", session.getAttribute("user"));
		session.invalidate();
		return "home2";
	}

	/**
	 * Uploads a photo for a user
	 * 
	 * @param id
	 *            of user
	 * @param photo
	 *            to upload
	 * @return
	 */
	@RequestMapping(value = "/user", method = RequestMethod.POST)
	public @ResponseBody String handleFileUpload(@RequestParam("photo") MultipartFile photo,
			@RequestParam("id") String id) {
		if (!photo.isEmpty()) {
			try {
				byte[] bytes = photo.getBytes();
				BufferedOutputStream stream = new BufferedOutputStream(
						new FileOutputStream(ContextInitializer.getFile("user", id)));
				stream.write(bytes);
				stream.close();
				return "You successfully uploaded " + id + " into "
						+ ContextInitializer.getFile("user", id).getAbsolutePath() + "!";
			} catch (Exception e) {
				return "You failed to upload " + id + " => " + e.getMessage();
			}
		} else {
			return "You failed to upload a photo for " + id + " because the file was empty.";
		}
	}

	/**
	 * Displays user details
	 */
	@RequestMapping(value = "/user", method = RequestMethod.GET)
	public String user(HttpSession session, HttpServletRequest request) {
		return "user";
	}

	/**
	 * Displays single-book details
	 */
	@RequestMapping(value = "/book/{id}", method = RequestMethod.GET)
	public String book(@PathVariable("id") long id, HttpServletResponse response, Model model) {
		Book b = entityManager.find(Book.class, id);
		if (b == null) {
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);
			logger.error("No such book: {}", id);
		} else {
			model.addAttribute("book", b);
		}
		model.addAttribute("prefix", "../");
		return "book";
	}

	/**
	 * obtener los datos de la BD para modificar politico
	 * 
	 * @param id
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/modificarPolitico/{id}", method = RequestMethod.GET)
	public String politico(@PathVariable("id") long id, HttpServletResponse response, Model model) {

		Politico b = (Politico) entityManager.createNamedQuery("politicoById").setParameter("idParam", id)
				.getSingleResult();
		if (b == null) {
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);
			logger.error("No such usuario: {}", id);
		} else {
			model.addAttribute("politico", b);

			model.addAttribute("prefix", "../"); // para generar URLs relativas
			return "modificarPolitico";
		}
		return "modificarPolitico";
	}

	/**
	 * Delete a book
	 */
	@RequestMapping(value = "/book/{id}", method = RequestMethod.DELETE)
	@Transactional
	@ResponseBody
	public String rmbook(@PathVariable("id") long id, HttpServletResponse response, Model model) {
		try {
	 
			Book b = entityManager.find(Book.class, id);
			for (Author a : b.getAuthors()) {
				a.getWritings().remove(b);
				entityManager.persist(a);
			}
			entityManager.remove(b);
			response.setStatus(HttpServletResponse.SC_OK);
			return "OK";
		} catch (NoResultException nre) {
			logger.error("No such book: {}", id, nre);
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);
			return "ERR";
		}
	}

	/*
	 * List all books
	 */
	@RequestMapping(value = "/books", method = RequestMethod.GET)
	@Transactional
	public String books(Model model) {
		model.addAttribute("books", entityManager.createNamedQuery("allBooks").getResultList());
		model.addAttribute("owners", entityManager.createNamedQuery("allUsers").getResultList());
		model.addAttribute("authors", entityManager.createNamedQuery("allAuthors").getResultList());
		return "books";
	}

	/*
	 * Add a book
	 */
	@RequestMapping(value = "/book", method = RequestMethod.POST)
	@Transactional
	public String book(@RequestParam("owner") long ownerId, @RequestParam("authors") long[] authorIds,
			@RequestParam("title") String title, @RequestParam("description") String description, Model model) {
		Book b = new Book();
		b.setTitle(title);
		b.setDescription(description);
		for (long aid : authorIds) {
			// adding authors to book is useless, since author is the owning
			// side (= has no mappedBy)
			Author a = entityManager.find(Author.class, aid);
			a.getWritings().add(b);
			entityManager.persist(a);
		}
		b.setOwner(entityManager.getReference(User.class, ownerId));
		entityManager.persist(b);
		entityManager.flush();
		logger.info("Book " + b.getId() + " written ok - owned by " + b.getOwner().getLogin() + " written by "
				+ b.getAuthors());

		return "redirect:book/" + b.getId();
	}

	/**
	 * Load book authors for a given book via post; return as JSON
	 */
	@RequestMapping(value = "/bookAuthors")
	@ResponseBody
	@Transactional // needed to allow lazy init to work
	public ResponseEntity<String> bookAuthors(@RequestParam("id") long id, HttpServletRequest request) {
		try {
			Book book = (Book) entityManager.find(Book.class, id);
			List<Author> authors = book.getAuthors();
			StringBuilder sb = new StringBuilder("[");
			for (Author a : authors) {
				if (sb.length() > 1)
					sb.append(",");
				sb.append("{ " + "\"id\": \"" + a.getId() + "\", " + "\"familyName\": \"" + a.getFamilyName() + "\", "
						+ "\"lastName\": \"" + a.getLastName() + "\"}");
			}
			return new ResponseEntity<String>(sb + "]", HttpStatus.OK);
		} catch (NoResultException nre) {
			logger.error("No such book: {}", id, nre);
		}
		return new ResponseEntity<String>("Error: libro no existe", HttpStatus.BAD_REQUEST);
	}

	/**
	 * Displays author details
	 */
	@RequestMapping(value = "/author/{id}", method = RequestMethod.GET)
	public String author(@PathVariable("id") long id, Model model) {
		try {
			model.addAttribute("author", entityManager.find(Author.class, id));
		} catch (NoResultException nre) {
			logger.error("No such author: {}", id, nre);
		}
		model.addAttribute("prefix", "../");
		return "author";
	}

	/**
	 * Returns a users' photo
	 * 
	 * @param id
	 *            id of user to get photo from
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/user/photo", method = RequestMethod.GET, produces = MediaType.IMAGE_JPEG_VALUE)
	public byte[] userPhoto(@RequestParam("id") String id) throws IOException {
		File f = ContextInitializer.getFile("user", id);
		InputStream in = null;
		if (f.exists()) {
			in = new BufferedInputStream(new FileInputStream(f));
		} else {
			in = new BufferedInputStream(this.getClass().getClassLoader().getResourceAsStream("unknown-user.jpg"));
		}

		return IOUtils.toByteArray(in);
	}

	/**
	 * Toggles debug mode
	 */
	@RequestMapping(value = "/debug", method = RequestMethod.GET)
	public String debug(HttpSession session, HttpServletRequest request) {
		String formDebug = request.getParameter("debug");
		logger.info("Setting debug to {}", formDebug);
		session.setAttribute("debug", "true".equals(formDebug) ? "true" : "false");
		return "redirect:/";
	}

	@RequestMapping(value = "/s", method = RequestMethod.GET)
	public String poniendoSesion(Locale locale, Model model, HttpSession session) {
		// session.setAttribute("user", "juan");
		return "home";
	}

	@RequestMapping(value = "/vistaAdminEditor", method = RequestMethod.GET)
	public String vistaAdminEditor(Locale locale, Model model, HttpSession session) {
		model.addAttribute("editores",
				entityManager.createNamedQuery("allUsuarioRol").setParameter("rolParam", Rol.Editor).getResultList());
		return "vistaAdminEditor";
	}

	@RequestMapping(value = "/vistaAdminUsuario", method = RequestMethod.GET)
	public String vistaAdminUsuario(Locale locale, Model model, HttpSession session) {
		model.addAttribute("usuarios", entityManager.createNamedQuery("allUsuarioRol")
				.setParameter("rolParam", Rol.UsuarioRegistrado).getResultList());
		return "vistaAdminUsuario";
	}

	@RequestMapping(value = "/vistaAdminNoticias", method = RequestMethod.GET)
	public String vistaAdminNoticias(Locale locale, Model model, HttpSession session) {
		// model.addAttribute("admin", "pedro");
		return "vistaAdminNoticias";
	}

	@RequestMapping(value = "/vistaAdminEventos", method = RequestMethod.GET)
	public String vistaAdminEventos(Model model, HttpSession session) {
		model.addAttribute("eventos", entityManager.createNamedQuery("allEventos").getResultList());
		return "vistaAdminEventos";
	}

	@RequestMapping(value = "/crearEvento", method = RequestMethod.GET)
	public String crearEvento(Locale locale, Model model, HttpSession session) {

		return "crearEvento";
	}

	@RequestMapping(value = "/crearEven", method = RequestMethod.POST)
	@Transactional
	public String nuevoEvento(@RequestParam("nombreEvento") String formNombreEvento,
			@RequestParam("descripcion") String formDrecripcion,
			@RequestParam("nombreOpcion1") String formNombreOpcion1, @RequestParam("tipoRecurso1") String formRecurso1,
			@RequestParam("modificador1") String formModificador1,
			@RequestParam("nombreOpcion2") String formNombreOpcion2, @RequestParam("tipoRecurso2") String formRecurso2,
			@RequestParam("modificador2") String formModificador2,
			HttpServletRequest request,
			HttpServletResponse response, Model model, HttpSession session) throws ParseException, IOException {

		int modificador1 = Integer.parseInt(formModificador1);
		int modificador2 = Integer.parseInt(formModificador2);


		TipoRecurso recurso1 = TipoRecurso.stringtoRecurso(formRecurso1);
		TipoRecurso recurso2 = TipoRecurso.stringtoRecurso(formRecurso2);
		TipoEvento evento = TipoEvento.EVENTO_REGULAR;

		System.out.println(formNombreEvento);
		System.out.println(evento);
		System.out.println(formDrecripcion);
		System.out.println(formNombreOpcion1);
		System.out.println(recurso1);
		System.out.println(modificador1);
		System.out.println(formNombreOpcion2);
		System.out.println(recurso2);
		System.out.println(modificador2);

		try {
			Evento e = new Evento(formNombreEvento, formDrecripcion, formNombreOpcion1, formNombreOpcion2, recurso1,
					recurso2, modificador1, modificador2, evento);
			System.out.println(e.getTitulo());
			entityManager.persist(e);
			entityManager.flush();
			
			//Aqui hay que añadir el evento a todos los jugadores
			
			
			
			@SuppressWarnings("unchecked")
			List<Usuario> us = (List<Usuario>) entityManager.createNamedQuery("allUsuarioRol").setParameter("rolParam", Rol.UsuarioRegistrado).getResultList();
			
			if(us.size()!=0){
				int i = 1;
				while (i<=us.size()){
					
						System.out.println(us.get(i-1).getNombre());
						Pais p = us.get(i-1).getPais();
						p.getEventos().add(e);
						entityManager.persist(p);
						
						e.setPropietario_evento(p);
						entityManager.merge(e);
						entityManager.flush();
						System.out.println("Nombre " +us.get(i-1).getNombre());
						i++;
					
				}
			}
			
			return "redirect:" + "vistaAdminEventos";

		} catch (IOException e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
		}

		return "redirect:" + "vistaAdminEventos";
	}

	@RequestMapping(value = "/even/{id}", method = RequestMethod.DELETE)
	@Transactional
	@ResponseBody
	public String rmEven(@PathVariable("id") long id, HttpServletResponse response, Model model) {
		try {
			Evento e = entityManager.find(Evento.class, id);
			entityManager.remove(e);
			response.setStatus(HttpServletResponse.SC_OK);

			return "OK";
		} catch (NoResultException nre) {
			logger.error("No existe ese evento: {}", id, nre);
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);

			return "ERR";
		}
	}

	@RequestMapping(value = "/modificarEvento", method = RequestMethod.GET)
	public String modificarEven(Locale locale, Model model, HttpSession session) {
		return "modificarEvento";
	}

	@RequestMapping(value = "/modificarEven", method = RequestMethod.POST)
	@Transactional
	public String modificarEven(@RequestParam("nombreEvento") String formNombreEvento,
			@RequestParam("descripcion") String formDrecripcion,
			@RequestParam("nombreOpcion1") String formNombreOpcion1, @RequestParam("tipoRecurso1") String formRecurso1,
			@RequestParam("modificador1") String formModificador1,
			@RequestParam("nombreOpcion2") String formNombreOpcion2, @RequestParam("tipoRecurso2") String formRecurso2,
			@RequestParam("modificador2") String formModificador2,
			@RequestParam("source") String formId,
			HttpServletRequest request, HttpServletResponse response, Model model, HttpSession session)
					throws ExceptionPolitico, ParseException {

		int modificador1 = Integer.parseInt(formModificador1);
		int modificador2 = Integer.parseInt(formModificador2);
		


		TipoRecurso recurso1 = TipoRecurso.stringtoRecurso(formRecurso1);
		TipoRecurso recurso2 = TipoRecurso.stringtoRecurso(formRecurso2);
		Long id = Long.parseLong(formId);

		Evento e = entityManager.find(Evento.class, id);

		if (formNombreEvento != "") {
			e.setTitulo(formNombreEvento);
		}
	

		if (formDrecripcion != "") {
			e.setDescripcion(formDrecripcion);
		}
		if (formNombreOpcion1 != "") {
			e.setOpcion1(formNombreOpcion1);
		}
		if (formRecurso1 != null) {
			e.setRec1(recurso1);
		}
		if (formModificador1 != null) {
			e.setPorcentaje1(modificador1);
		}
		if (formNombreOpcion2 != "") {
			e.setOpcion1(formNombreOpcion2);
		}
		if (formRecurso2 != null) {
			e.setRec1(recurso2);
		}
		if (formModificador2 != null) {
			e.setPorcentaje1(modificador2);
		}
	

		entityManager.merge(e);

		entityManager.flush();
		return "redirect:" + "vistaAdminEventos";

	}

	/**
	 * obtener los datos de la BD para modificar evento
	 * 
	 * @param id
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/modificarEvento/{id}", method = RequestMethod.GET)
	public String evento(@PathVariable("id") long id, HttpServletResponse response, Model model) {

		Evento e = (Evento) entityManager.createNamedQuery("eventoById").setParameter("idParam", id).getSingleResult();
		if (e == null) {
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);
			logger.error("No such usuario: {}", id);
		} else {
			model.addAttribute("evento", e);

			model.addAttribute("prefix", "../"); // para generar URLs relativas
			return "modificarEvento";
		}
		return "modificarEvento";
	}
	@RequestMapping(value = "/eventos", method = RequestMethod.GET)
	public String eventos(Locale locale, Model model, HttpSession session) {
		Usuario u = (Usuario) session.getAttribute("rol");
		
		model.addAttribute("eventos",
				entityManager.createQuery("Select e from Evento e where e.propietario_evento = " + u.getPais().getId())
						.getResultList());
	
		return "eventos";
	}
	
	@RequestMapping(value = "/opcionUno/{id}", method = RequestMethod.GET)
	@Transactional
	@ResponseBody
	public String opcionuno(@PathVariable("id") long id, HttpServletResponse response, Model model,
			HttpSession session) {
		try {
			System.out.println("entro");
			Usuario u = (Usuario) session.getAttribute("rol");
			Evento e = entityManager.find(Evento.class, id);
			Pais p = entityManager.find(Pais.class, u.getPais().getId());
			
				
			//Tratar el evento.
			
			ModificadorProduccion m = e.respondeEvento(1);
			System.out.print(m.getTitulo());
			entityManager.merge(m);
			//entityManager.merge(e);
			entityManager.flush();
			p.addModificador(m);
			p.getEventos().remove(e);
			entityManager.merge(p);
			entityManager.flush();
			

		} catch (NoResultException nre) {
			logger.error("No existe ese politico: {}", id, nre);
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);

			return "ERR";
		}
		//response.setStatus(HttpServletResponse.SC_NOT_FOUND);
		return "eventos";
	}
	@RequestMapping(value = "/opcionDos/{id}", method = RequestMethod.GET)
	@Transactional
	@ResponseBody
	public String opciondos(@PathVariable("id") long id, HttpServletResponse response, Model model,
			HttpSession session) {
		try {
			System.out.println("entro");
			Usuario u = (Usuario) session.getAttribute("rol");
			Evento e = entityManager.find(Evento.class, id);
			Pais p = entityManager.find(Pais.class, u.getPais().getId());
			
				
			//Tratar el evento.
			
			ModificadorProduccion m = e.respondeEvento(2);
			System.out.print(m.getTitulo());
			entityManager.merge(m);
			entityManager.merge(e);
			entityManager.flush();
			p.addModificador(m);
			
			entityManager.merge(p);
			entityManager.flush();
			


		} catch (NoResultException nre) {
			logger.error("No existe ese politico: {}", id, nre);
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);

			return "ERR";
		}
		response.setStatus(HttpServletResponse.SC_NOT_FOUND);
		return "ERR";
	}

	/**
	 * 
	 * Devolver todos los políticos de la BD
	 * 
	 * @param model
	 * @param session
	 * @return
	 */
	@RequestMapping(value = "/vistaAdminPoliticos", method = RequestMethod.GET)
	public String vistaAdminPoliticos(Model model, HttpSession session) {

		model.addAttribute("politicos", entityManager.createNamedQuery("allPoliticos").getResultList());

		return "vistaAdminPoliticos";
	}

	@RequestMapping(value = "/w", method = RequestMethod.GET)
	public String poniendoModelo(Locale locale, Model model, HttpSession session) {
		// model.addAttribute("anterior", session.getAttribute("user"));
		model.addAttribute("user", "pedro");
		return "home2";
	}

	@RequestMapping(value = "/pru", method = RequestMethod.GET)
	public String prueba2(Locale locale, Model model, HttpSession session) {
		// model.addAttribute("anterior", session.getAttribute("user"));
		model.addAttribute("test", "pedro");
		return "home2";
	}

	@RequestMapping(value = "/o", method = RequestMethod.GET)
	public String logout(Locale locale, Model model, HttpSession session) {
		return "home2";
	}

	public String algo(Locale locale, Model model, HttpSession session) {
		return "redirect:logout";
	}

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String empty(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);

		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);

		String formattedDate = dateFormat.format(date);

		model.addAttribute("serverTime", formattedDate);
		model.addAttribute("pageTitle", "BePolitics");

		return "home2";
	}

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/home", method = RequestMethod.GET)
	public String index(Locale locale, Model model) {
		return empty(locale, model);
	}

	/**
	 * A not-very-dynamic view that shows an "about us".
	 */
	@RequestMapping(value = "/about", method = RequestMethod.GET)
	@Transactional
	public String about(Locale locale, Model model) {
		logger.info("User is looking up 'about us'");
		@SuppressWarnings("unchecked")
		List<User> us = (List<User>) entityManager.createQuery("select u from User u").getResultList();
		System.err.println(us.size());
		model.addAttribute("users", us);
		model.addAttribute("pageTitle", "IW: Quienes somos");
		return "about";
	}

	/**
	 * Checks the anti-csrf token for a session against a value
	 * 
	 * @param session
	 * @param token
	 * @return the token
	 */
	static boolean isTokenValid(HttpSession session, String token) {
		Object t = session.getAttribute("csrf_token");
		return (t != null) && t.equals(token);
	}

	/**
	 * Returns an anti-csrf token for a session, and stores it in the session
	 * 
	 * @param session
	 * @return
	 */
	static String getTokenForSession(HttpSession session) {
		String token = UUID.randomUUID().toString();
		session.setAttribute("csrf_token", token);
		return token;
	}

	/**
	 * Returns true if the user is logged in and is an admin
	 */
	static boolean isAdmin(HttpSession session) {
		User u = (User) session.getAttribute("user");
		if (u != null) {
			return u.getRole().equals("admin");
		} else {
			return false;
		}
	}

	/**
	 * Returns true if the user is logged in and is an admin
	 */
	static boolean esAdministrador(HttpSession session) {
		Usuario u = (Usuario) session.getAttribute("rol");
		if (u != null) {
			return u.getRol().toString().equals(Rol.Administrador.toString());
		} else {
			return false;
		}
	}

	/**
	 * Lleva a la pag de login
	 */
	@RequestMapping(value = "/iniciarSesion", method = RequestMethod.GET)
	@Transactional
	public String iniciarsesion(Locale locale, Model model) {

		model.addAttribute("pageTitle", "Iniciar Sesión");
		return "iniciarSesion";
	}

	@RequestMapping(value = "/eventosEditor", method = RequestMethod.GET)
	public String eventosEditor(Locale locale, Model model, HttpSession session) {
		// session.setAttribute("user", "juan");
		session.setAttribute("test", "pedro");
		return "eventosEditor";
	}

	@RequestMapping(value = "/crearCuenta", method = RequestMethod.GET)
	public String crearCuenta(Locale locale, Model model, HttpSession session) {
		return "crearCuenta";
	}



	@RequestMapping(value = "/guerras", method = RequestMethod.GET)
	public String guerras(Locale locale, Model model, HttpSession session) {
		Usuario u = (Usuario) session.getAttribute("rol");
	Query misEnemigos = entityManager.createQuery("select p from Pais p where p in "
			+ "(select gye.izquierda from Guerras g JOIN g.guerrasYEventos gye"
				+ " where g.propietario.id = "+  u.getPais().getId()+")");
	model.addAttribute("misEnemigos",misEnemigos.getResultList());

	Query enPaz = entityManager.createQuery("select p from Pais p where p.id != "
			+ u.getPais().getId()+" and p not in "
					+ "(select gye.izquierda from Guerras g JOIN g.guerrasYEventos gye"
					+ " where g.propietario.id = "+u.getPais().getId()+") and p not in "
							+ "(select cep from ComunidadEconomica ce JOIN ce.paises cep "
				+ "where ce.admin.id = "
				+ u.getPais().getId()+ ")");
	
	model.addAttribute("enPaz",enPaz.getResultList());
		return "guerras";
	}

	@RequestMapping(value = "/ministerios", method = RequestMethod.GET)
	public String ministerios(Locale locale, Model model, HttpSession session) {
		// session.setAttribute("user", "juan");
		session.setAttribute("user", "pedro");
		return "ministerios";
	}

	@RequestMapping(value = "/alianzas", method = RequestMethod.GET)
	public String alianzas(Locale locale, Model model, HttpSession session) {
		Usuario u = (Usuario) session.getAttribute("rol");
		
		model.addAttribute("miembros",
				entityManager.createQuery("select m from ComunidadEconomica ce JOIN ce.paises m where  ce.admin.id = "
						+ u.getPais().getId()).getResultList());


		Query otrosPaises = entityManager.createQuery("select p from Pais p where p not in"
				+ "(select cep from ComunidadEconomica ce JOIN ce.paises cep "
				+ "where ce.admin.id = "
				+ u.getPais().getId()+ ") and p.id <> "
						+ u.getPais().getId());
	
		model.addAttribute("otros",otrosPaises.getResultList());

		return "alianzas";
	}

	/**************************************************************/
	/************************* POLITICOS **************************/
	/**************************************************************/

	@RequestMapping(value = "/cupulaDeGobierno", method = RequestMethod.GET)
	public String cupulaDeGobierno(Locale locale, Model model, HttpSession session) {
		Usuario u = (Usuario) session.getAttribute("rol");
		model.addAttribute("politicos",
				entityManager.createQuery("Select p from Politico p where p.propietario.id = " + u.getPais().getId())
						.getResultList());
		return "cupulaDeGobierno";
	}

	@RequestMapping(value = "/mercado", method = RequestMethod.GET)
	public String mercado(Locale locale, Model model, HttpSession session) {

		model.addAttribute("politicos",
				entityManager.createQuery("Select p from Politico p where p.propietario is null").getResultList());
		return "mercado";
	}

	/**
	 * Devolver todos los politicos mostrandolos de mejor político a peor, es
	 * decir, politico con mejores estadísticas el primero
	 */
	@RequestMapping(value = "/ranking", method = RequestMethod.GET)
	public String ranking(Locale locale, Model model, HttpSession session) {
		model.addAttribute("politicos",
				entityManager.createQuery("Select p from Politico p ORDER BY p.sumaStats DESC").getResultList());
		model.addAttribute("paises",
				entityManager.createQuery("Select p from Pais p ORDER BY p.recursos.PIB DESC").getResultList());

		return "ranking";
	}

	@RequestMapping(value = "/crearPolitico", method = RequestMethod.GET)
	public String crearPolitico(Locale locale, Model model, HttpSession session) {
		return "crearPolitico";
	}

	@RequestMapping(value = "/modificarPolitico", method = RequestMethod.GET)
	public String modificarPol(Locale locale, Model model, HttpSession session) {
		return "modificarPolitico";
	}

	@RequestMapping(value = "/crearPol", method = RequestMethod.POST)
	@Transactional
	public String nuevoPolitico(@RequestParam("nombre") String formNombre, @RequestParam("cita") String formCita,
			@RequestParam("honestidad") String formHonestidad, @RequestParam("carisma") String formCarisma,
			@RequestParam("elocuencia") String formElocuencia, @RequestParam("popularidad") String formPopularidad,

			@RequestParam("precio") String formPrecio,

			HttpServletRequest request, HttpServletResponse response, Model model, HttpSession session)
					throws ExceptionPolitico {

		int honestidad = Integer.parseInt(formHonestidad);
		int carisma = Integer.parseInt(formCarisma);
		int elocuencia = Integer.parseInt(formElocuencia);
		int popularidad = Integer.parseInt(formPopularidad);
		Double precio = Double.parseDouble(formPrecio);
		System.out.println(honestidad);
		System.out.println(carisma);
		System.out.println(elocuencia);
		System.out.println(popularidad);
		Pais pais = null;

		try {

			Politico p = new Politico(carisma, elocuencia, honestidad, formNombre, popularidad, formCita, pais, precio);
			entityManager.persist(p);
			entityManager.flush();
			return "redirect:" + "vistaAdminPoliticos";

		} catch (ExceptionPolitico e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
		}

		return "redirect:" + "vistaAdminPoliticos";

	}

	@RequestMapping(value = "/modificarPol", method = RequestMethod.POST)
	@Transactional
	public String modificarPol(@RequestParam("nombre") String formNombre, @RequestParam("cita") String formCita,
			@RequestParam("honestidad") String formHonestidad, @RequestParam("carisma") String formCarisma,
			@RequestParam("elocuencia") String formElocuencia, @RequestParam("popularidad") String formPopularidad,
			@RequestParam("source") String formId, @RequestParam("precio") String formPrecio,
			HttpServletRequest request, HttpServletResponse response, Model model, HttpSession session)
					throws ExceptionPolitico {

		int honestidad = Integer.parseInt(formHonestidad);
		int carisma = Integer.parseInt(formCarisma);
		int elocuencia = Integer.parseInt(formElocuencia);
		int popularidad = Integer.parseInt(formPopularidad);
		Double precio = Double.parseDouble(formPrecio);
		Long id = Long.parseLong(formId);

		Politico p = entityManager.find(Politico.class, id);

		if (formCarisma != "") {
			p.setCarisma(carisma);
		}
		if (formHonestidad != "") {
			p.setHonestidad(honestidad);
		}
		if (formElocuencia != "") {
			p.setElocuencia(elocuencia);
		}
		if (formPopularidad != "") {
			p.setPopularidad(popularidad);
		}
		if (formNombre != "") {
			p.setNombre(formNombre);
		}
		if (formCita != "") {
			p.setCita(formCita);
		}
		if (formPrecio != "") {
			p.setPrecio(precio);

		}
		p.setPropietario(p.getPropietario());
		p.setSumaStats(p.getCarisma() + p.getHonestidad() + p.getElocuencia() + p.getPopularidad());

		System.out.println(p.getSumaStats());
		entityManager.merge(p);

		entityManager.flush();
		return "redirect:" + "vistaAdminPoliticos";

	}

	@RequestMapping(value = "/poli/{id}", method = RequestMethod.DELETE)
	@Transactional
	@ResponseBody
	public String rmPoli(@PathVariable("id") long id, HttpServletResponse response, Model model) {
		try {
			Politico b = entityManager.find(Politico.class, id);
			entityManager.remove(b);
			b = null;
			response.setStatus(HttpServletResponse.SC_OK);
			return "OK";
		} catch (NoResultException nre) {
			logger.error("No existe ese politico: {}", id, nre);
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);

			return "ERR";
		}
	}

	@RequestMapping(value = "/contratarPoli/{id}", method = RequestMethod.GET)
	@Transactional
	@ResponseBody
	public String contratarPoli(@PathVariable("id") long id, HttpServletResponse response, Model model,
			HttpSession session) {
		try {
			System.out.println("entro");
			Politico b = entityManager.find(Politico.class, id);
			Usuario u = (Usuario) session.getAttribute("rol");
			Pais p = entityManager.find(Pais.class, u.getPais().getId());

			Recursos pr = p.getRecursos();

			if (pr.getPIB() >= b.getPrecio()) {

				b.setPropietario(p);
				entityManager.merge(b);

				pr.setPIB((int) (pr.getPIB() - b.getPrecio()));
				p.getPoliticos().add(b);
				entityManager.merge(p);
				entityManager.merge(pr);
				entityManager.flush();

				response.setStatus(HttpServletResponse.SC_OK);
				return "OK";
			}
			b = null;

		} catch (NoResultException nre) {
			logger.error("No existe ese politico: {}", id, nre);
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);

			return "ERR";
		}
		response.setStatus(HttpServletResponse.SC_NOT_FOUND);
		return "ERR";
	}

	/**************************************************************/
	/************************ FIN POLITICOS ***********************/
	/**************************************************************/

	/**************************************************************/
	/************************** USUARIOS **************************/
	/**************************************************************/

	/**
	 * Agrega al modelo las construcciones de un pais
	 *//*
	@RequestMapping(value = "/produccion/{id}", method = RequestMethod.GET)
	@Transactional
	public String produccionId(@PathVariable("id") long id, Locale locale, Model model, HttpSession session) {
		//TODO arreglar pérdida del css
		System.out.println("\n/produccion/{id}  Aquí está llegando\n");
		Usuario u = entityManager.find(Usuario.class, id);
		System.out.println(u.getNick());
		Pais p = u.getPais();
		System.out.println(p.getNombre());
		Construcciones c = p.getConstrucciones();
		
		System.out.println("id user="+ u.getId()+"\nid pais="+ p.getId()+"\nid construcciones=" + c.getIdPais());
		
		model.addAttribute("prefix", "../"); // para generar URLs relativas
		model.addAttribute("construcciones", u.getPais().getConstrucciones());
		
		return "produccion";
	}*/
	
	/**
	 * Accede a produccion
	 */
	@RequestMapping(value = "/produccion", method = RequestMethod.GET)
	public String produccion(Locale locale, Model model, HttpSession session) {
		//TODO no sé si tiene que devolver algo distinto, en principio creo que no porque
		Usuario u = (Usuario)session.getAttribute("rol");	
		System.out.println(u.getNick());
		
		model.addAttribute("prefix", "../"); // para generar URLs relativas
		model.addAttribute("construcciones", u.getPais().getConstrucciones());
		return "produccion";
	}
	
	
	@RequestMapping(value = "/crearUsuario", method = RequestMethod.POST)
	@Transactional
	public String nuevaCuenta(@RequestParam("nombre") String formNombre,
			@RequestParam("apellidos") String formApellidos, @RequestParam("correo") String formCorreo,
			@RequestParam("genero") String formGenero, @RequestParam("edad") String formEdad,
			@RequestParam("nick") String formNick, @RequestParam("contra") String formContra,
			@RequestParam("pais") String formPais, @RequestParam("lider") String formLider,
			@RequestParam("rol") String formRol, @RequestParam("source") String formSource,

			HttpServletRequest request, HttpServletResponse response, Model model, HttpSession session) {

		Pais p = null;
		if (formRol.isEmpty()) {
			formRol = "UsuarioRegistrado";
		}

		int edad = Integer.parseInt(formEdad);
		Usuario u = null;
		
		
		// TODO si funciona, borrar
		//boolean isLoggedIn = (session.getAttribute("rol") != null);

		try {
			formRol = formRol.toLowerCase();
			if (formRol.equals("administrador") || formRol.equals("editor")) {

				Rol r = formRol.equals("editor") ? Rol.Editor : Rol.Administrador;
				u = new Usuario(formNombre, formApellidos, formCorreo, Genero.valueOf(formGenero), edad, formNick, null,
						TipoLider.valueOf(formLider), formContra, r);
			} else {

				Construcciones c = new Construcciones(" ");
				ComunidadEconomica ce = new ComunidadEconomica();
				Recursos r = new Recursos();
				p = new Pais(c, formPais, r);
				ce.setAdmin(p);
				c.setIdPais(p.getId());
				
				u = new Usuario(formNombre, formApellidos, formCorreo, Genero.valueOf(formGenero), edad, formNick, p,
						TipoLider.valueOf(formLider), formContra, Rol.Administrador);
				u.setPais(p);
				p.setUsuario(u);
				entityManager.persist(c);
				entityManager.persist(ce);
				entityManager.persist(p);
				entityManager.persist(p);
			}

			entityManager.persist(u);
			// entityManager.flush(); // <- implicito al final de la transaccion

			String rol = u.getRol().toString();
			System.out.println(rol);
			if (!esAdministrador(session)) {
				session.setAttribute("rol", u);
				getTokenForSession(session);
			} else {
				// String formSource = request.getParameter("formSource");
				return "redirect:" + formSource;
			}

		} catch (ExceptionUsuario e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
		}

		return "home2";

	}

	@RequestMapping(value = "/entrar", method = RequestMethod.POST)
	@Transactional
	public String nuevaSesion(@RequestParam("nick") String formNick, @RequestParam("contra") String formContra,
			@RequestParam("source") String formSource, HttpServletRequest request, HttpServletResponse response,
			Model model, HttpSession session) {

		logger.info("Login attempt from '{}' while visiting '{}'", formNick, formSource);

		// validate request
		if (formNick == "" || formContra == "" || formContra.length() < 6) {
			model.addAttribute("loginError", "Rellene el campo Nick \n Contraseña : 6 caracteres mínimo");
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
		} else {

			// http://alejandroayala.solmedia.ec/?p=947 (Para que sirve el try
			// catch)
			try {
				Usuario u = (Usuario) entityManager.createNamedQuery("usuarioByLogin")
						.setParameter("loginParam", formNick).getSingleResult();

				if (u.isPassValid(formContra)) {
					System.out.println(u.getNombre());
					logger.info("pass was valid");
					session.setAttribute("rol", u);
					// sets the anti-csrf token
					getTokenForSession(session);
				} else {
					System.out.println("no");
					logger.info("pass was NOT valid");
					model.addAttribute("loginError", "error en usuario o contraseña");
					response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
				}

			} catch (NoResultException nre) {
				logger.info("no-such-user; creating user {}", formNick);
			}
			return "home2";
		}
		return "home2";
	}

	/**
	 * Modifica el usuario
	 */
	@RequestMapping(value = "/modificarUsu", method = RequestMethod.POST)
	@Transactional
	public String modificarUsu(@RequestParam("nombre") String formNombre,
			@RequestParam("apellidos") String formApellidos, @RequestParam("correo") String formCorreo,
			@RequestParam("genero") String formGenero, @RequestParam("edad") String formEdad,
			@RequestParam("nick") String formNick, @RequestParam("contra") String formContra,
			@RequestParam("pais") String formPais, @RequestParam("lider") String formLider,
			@RequestParam("id") String formId, HttpServletRequest request, HttpServletResponse response, Model model,
			HttpSession session) {

		Long id = Long.parseLong(formId);
		int edad = Integer.parseInt(formEdad);

		Usuario u = entityManager.find(Usuario.class, id);
		if (u.getRol() == Rol.UsuarioRegistrado) {

			Pais p = u.getPais();
			p = entityManager.find(Pais.class, p.getId());

			if (formPais != "") {
				p.setNombre(formPais);
				u.setPais(p);
			}
		}

		if (formApellidos != "") {
			u.setApellidos(formApellidos);
		}
		if (formNombre != "") {
			u.setNombre(formNombre);
		}
		if (formGenero != "") {
			u.setGenero(Genero.valueOf(formGenero));
		}
		if (formCorreo != "") {
			u.setEmail(formCorreo);
		}
		if (formNick != "") {
			u.setNick(formNick);
		}
		if (formContra != "") {
			u.setHashedAndSalted(formContra);
		}
		if (formLider != "") {
			u.settipoLider(TipoLider.valueOf(formLider));
		}
		if (formEdad != "") {
			u.setEdad(edad);
		}

		entityManager.merge(u);
		entityManager.flush();

		if (u.getRol() == Rol.Editor) {
			return "redirect:vistaAdminEditor";
		} else if (u.getRol() == Rol.UsuarioRegistrado) {
			return "redirect:vistaAdminUsuario";
		}
		return "home2";
	}

	/**
	 * Inicio sesion Admin
	 */
	@RequestMapping(value = "/vistaAdmin", method = RequestMethod.GET)
	public String vistaAdmin(Locale locale, Model model, HttpSession session) {
		model.addAttribute("anterior", session.getAttribute("user"));
		model.addAttribute("admin", "pedro");
		return "home2";
	}

	/**
	 * Inicio sesion Editor
	 */
	@RequestMapping(value = "/vistaEditor", method = RequestMethod.GET)
	public String vistaEditor(Locale locale, Model model, HttpSession session) {
		// model.addAttribute("anterior", session.getAttribute("user"));
		model.addAttribute("test", "pedro");
		return "home2";
	}

	/**
	 * Inicio sesion Jugador
	 */
	@RequestMapping(value = "/vistaJugador", method = RequestMethod.GET)
	public String vistaJugador(Locale locale, Model model, HttpSession session) {
		// model.addAttribute("anterior", session.getAttribute("user"));
		model.addAttribute("user", "pedro");
		return "home2";
	}

	/**
	 * Borra el editor
	 */
	@RequestMapping(value = "/editor/{id}", method = RequestMethod.DELETE)
	@Transactional
	@ResponseBody
	public String rmEditor(@PathVariable("id") long id, HttpServletResponse response, Model model) {
		try {
			Usuario b = entityManager.find(Usuario.class, id);
			entityManager.remove(b);
			b = null;
			response.setStatus(HttpServletResponse.SC_OK);
			return "OK";
		} catch (NoResultException nre) {
			logger.error("No existe ese editor: {}", id, nre);
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);

			return "ERR";
		}
	}

	/**
	 * Borra el usuario cuya id se visita.
	 */
	@RequestMapping(value = "/usuario/{id}", method = RequestMethod.DELETE)
	@Transactional
	@ResponseBody
	public String rmUsuario(@PathVariable("id") long id, HttpServletResponse response, Model model) {
		try {
			Usuario b = entityManager.find(Usuario.class, id);
			entityManager.remove(b);
			b = null;
			response.setStatus(HttpServletResponse.SC_OK);
			return "OK";
		} catch (NoResultException nre) {
			logger.error("No existe ese usuario: {}", id, nre);
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);

			return "ERR";
		}
	}

	@RequestMapping(value = "/modificarUsuario", method = RequestMethod.GET)
	public String modificarUsuario(Locale locale, Model model, HttpSession session) {
		return "redirect:modificarUsuario";
	}

	/**
	 * obtener los datos de la BD para modificar usuario
	 * 
	 * @param id
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/modificarUsuario/{id}", method = RequestMethod.GET)
	public String usuario(@PathVariable("id") long id, HttpServletResponse response, Model model) {

		Usuario b = (Usuario) entityManager.createNamedQuery("usuarioById").setParameter("idParam", id)
				.getSingleResult();
		if (b == null) {
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);
			logger.error("No such usuario: {}", id);
		} else {
			model.addAttribute("usuario", b);
			System.out.println(b.getId());

			model.addAttribute("prefix", "../"); // para generar URLs relativas
			return "modificarUsuario";
		}
		return "modificarUsuario";
	}
	/**
	 * Expulsar a un miembro de la comunidad económica.
	 */

	@RequestMapping(value = "/expulsar/{id}", method = RequestMethod.GET)
	@Transactional
	@ResponseBody
	public String expulsarPais(@PathVariable("id") long id, HttpServletResponse response, Model model,HttpSession session) {
		try {
			
			Usuario u = (Usuario) session.getAttribute("rol");
			Query q = entityManager.createQuery("select ce from ComunidadEconomica ce where ce.admin.id = "
					+ u.getPais().getId());
			ComunidadEconomica miComunidadEconomica = (ComunidadEconomica) q.getSingleResult();
			Pais paisExpulsar = entityManager.find(Pais.class, id);
			
			miComunidadEconomica.getPaises().remove(paisExpulsar);
			paisExpulsar.getMiComunidad().remove(miComunidadEconomica);
			
			entityManager.merge(miComunidadEconomica);
			entityManager.merge(paisExpulsar);
			entityManager.flush();

			
			paisExpulsar = null;
			miComunidadEconomica  = null;
			u = null;
			response.setStatus(HttpServletResponse.SC_OK);
			return "OK";
		} catch (NoResultException nre) {
			logger.error("No existe ese pais: {}", id, nre);
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);

			return "ERR";
		}
	}
	
	/**
	 * Iniciar una guerra.
	 */

	@RequestMapping(value = "/guerra/{id}", method = RequestMethod.GET)
	@Transactional
	@ResponseBody
	public String guerraPais(@PathVariable("id") long id, HttpServletResponse response, Model model,HttpSession session) {
		try {
			
			Usuario u = (Usuario) session.getAttribute("rol");
			Pais miPais  = entityManager.find(Pais.class, u.getPais().getId());
			Pais paisEnemigo = entityManager.find(Pais.class, id);
		
			Pair miPair = new Pair();
			entityManager.persist(miPair);
			
			GestorEventos miGE = new GestorEventos(TipoEvento.GUERRA);
			entityManager.persist(miGE);
			
			miPair.setIzquierda(paisEnemigo);
			miPair.setDerecha(miGE);
			miPair.setGuerra(miPais.getGuerra());
			
			miPais.getGuerra().getGuerrasYEventos().add(miPair);
			
			Pair enemigoPair = new Pair();
			entityManager.persist(enemigoPair);

			GestorEventos enemigoGE = new GestorEventos(TipoEvento.GUERRA);
			entityManager.persist(enemigoGE);
			
			enemigoPair.setDerecha(enemigoGE);
			enemigoPair.setIzquierda(miPais);
			enemigoPair.setGuerra(miPais.getGuerra());
			
			paisEnemigo.getGuerra().getGuerrasYEventos().add(enemigoPair);
			
			

			entityManager.merge(miPair);
			entityManager.merge(enemigoPair);
			entityManager.merge(miPais);
			entityManager.merge(paisEnemigo);
			entityManager.flush();
			
			u=null;
			miPais=null;
			paisEnemigo=null;
			miPair=null;
			enemigoPair=null;
			miGE=null;
			enemigoGE=null;
			
			response.setStatus(HttpServletResponse.SC_OK);
			return "OK";
		} catch (NoResultException nre) {
			logger.error("No existe ese politico: {}", id, nre);
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);

			return "ERR";
		}
	}
	
	
	/**
	 * Rendirse.
	 */

	@RequestMapping(value = "/rendirse/{id}", method = RequestMethod.GET)
	@Transactional
	@ResponseBody
	public String rendirsePais(@PathVariable("id") long id, HttpServletResponse response, Model model,HttpSession session) {
		try {
		
			Usuario u = (Usuario) session.getAttribute("rol");
			Pais miPais  = entityManager.find(Pais.class, u.getPais().getId());
			Pais paisEnemigo = entityManager.find(Pais.class, id);
			
			Query miPair = entityManager.createQuery("select pa from Pair pa where pa.izquierda.id = "
					+id+ " and pa.guerra.propietario.id = " + miPais.getId());
			
			miPais.getGuerra().getGuerrasYEventos().remove(miPair.getSingleResult());
			


			Query enemigoPair = entityManager.createQuery("select pa from Pair pa where pa.izquierda.id = "
					+miPais.getId()+ " and pa.guerra.propietario.id = " + paisEnemigo.getId());
			
			paisEnemigo.getGuerra().getGuerrasYEventos().remove(enemigoPair.getSingleResult());
			
			

			entityManager.merge(miPais);
			entityManager.merge(paisEnemigo);
			entityManager.flush();
			
			u=null;
			miPais=null;
			paisEnemigo=null;
			miPair=null;
			enemigoPair=null;
			
			response.setStatus(HttpServletResponse.SC_OK);
			return "OK";
		} catch (NoResultException nre) {
			logger.error("No existe ese pair: {}", id, nre);
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);

			return "ERR";
		}
	}
	

	
	/***
	 * Invitar a un nuevo pais a mi comunidad económica
	 * @param id
	 * @param response
	 * @param model
	 * @param session
	 * @return
	 */
	@RequestMapping(value = "/invitar/{id}", method = RequestMethod.GET)
	@Transactional
	@ResponseBody
	public String invitarPais(@PathVariable("id") long id, HttpServletResponse response, Model model,HttpSession session) {
		System.out.println(id);
		try {
			
			//TODO crear un evento y enviarlo al pais correspondiente

			Usuario u = (Usuario) session.getAttribute("rol");
			
			Query q = entityManager.createQuery("select ce from ComunidadEconomica ce where ce.admin.id = "
					+ u.getPais().getId());
			ComunidadEconomica miComunidadEconomica = (ComunidadEconomica) q.getSingleResult();
			Pais paisInvitado = entityManager.find(Pais.class, id);
			
			miComunidadEconomica.getPaises().add(paisInvitado);
			paisInvitado.getMiComunidad().add(miComunidadEconomica);
			
			// Evento(String tit, String desc,TipoEvento tipo, Pais propietario_evento) 
			//TODO si no funciona da igual
			
			/* 
			try {
				Evento eventoPaisInvitado = new Evento("Nueva comunidad económica", "Tu país forma parte de la comunidad económica del país "
						+ u.getPais().getNombre(),
						TipoEvento.COMUNIDAD_ECONOMICA,paisInvitado);
				paisInvitado.getEventos().add(eventoPaisInvitado);
				
				Evento eventoMiPais = new Evento("Nuevo país en comunidad económica",
						"Se incorporado el país "+ paisInvitado.getNombre()+ " a tu comunidad económica",
						TipoEvento.COMUNIDAD_ECONOMICA, u.getPais());
				u.getPais().getEventos().add(eventoMiPais);
				
				entityManager.merge(eventoPaisInvitado);
				entityManager.merge(eventoMiPais);
				entityManager.merge(u.getPais());
			} catch (IOException e) {
				// 
				e.printStackTrace();
			}
			*/
			
			
			
			
			entityManager.merge(miComunidadEconomica);
			entityManager.merge(paisInvitado);
			entityManager.flush();
			
			u = null;
			miComunidadEconomica = null;
			paisInvitado = null;
			model.addAttribute("prefix", "../"); // para generar URLs relativas
			System.out.println(id);
			response.setStatus(HttpServletResponse.SC_OK);
			return "OK";
			
		} catch (NoResultException nre) {
			logger.error("No se ha podido invitar al pais: {}", id, nre);
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);

			return "ERR";
		}
	}
	
	
	/**
	 * Sube el nivel a una construccion
	 */
	@RequestMapping(value = "/subeNivel/{id}/{building}", method = RequestMethod.GET)
	public String subeNivel(@PathVariable("id") long id, 
							@PathVariable("building") int building, 
							HttpServletResponse response, 
							Model model) {
		
		System.out.println("/subeNivel, aquí llega");
		
		try {
			//TODO comprobar código
			
			Usuario b = entityManager.find(Usuario.class, id);
			b.getPais().getConstrucciones().subeNivel(TipoConstruccion.getConstruccion(building), b.getPais().getRecursos());
			
			response.setStatus(HttpServletResponse.SC_OK);
		} catch (NoResultException nre) {
			logger.error("No existe ese politico: {}", id, nre);
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);

			return "ERR";
		}
		return "redirect:produccion/"+id;
	}
	
	/**************************************************************/
	/*********************** FIN USUARIOS *************************/
	/**************************************************************/

	/**************************************************************/
	/************************** NOTICIAS **************************/
	/**************************************************************/

	/**
	 * Hace una lista de todas las noticias
	 */
	@RequestMapping(value = "/noticias", method = RequestMethod.GET)
	@Transactional
	public String noticias(Locale locale, Model model, HttpSession session) {

		model.addAttribute("noticias", entityManager.createNamedQuery("allNoticias").getResultList());

		return "noticias";
	}

	/**
	 * Hace una lista de todas las noticias
	 */
	@RequestMapping(value = "/noticiasEditor", method = RequestMethod.GET)
	@Transactional
	public String noticiasEditor(Locale locale, Model model, HttpSession session) {

		model.addAttribute("noticias", entityManager.createNamedQuery("allNoticias").getResultList());

		return "noticiasEditor";
	}

	/**
	 * Crea una noticia
	 */
	@RequestMapping(value = "/crearNoticia", method = RequestMethod.POST)
	@Transactional
	public String crearNoticia(@RequestParam("source") String formSource, @RequestParam("titulo") String formTitulo,
			@RequestParam("cuerpo") String formCuerpo, Model model, HttpSession session, HttpServletRequest request,
			HttpServletResponse response) {

		Noticia n = new Noticia(formTitulo, formCuerpo);

		if (n.getTitulo() != null && n.getTitulo().length() > 3 && n.getCuerpo() != null
				&& n.getCuerpo().length() > 10) {
			logger.info("\nInsertada noticia con título: " + n.getTitulo() + "\nY texto: " + n.getCuerpo() + "\n");
			entityManager.persist(n);
			// entityManager.flush();
		} else {
			logger.info("\nFallo al añadir noticia, titulo: " + n.getTitulo() + "\ncuerpo: " + n.getCuerpo() + "\n");
		}
		return "redirect:" + formSource;
	}

	/**
	 * Borra una noticia
	 */
	@RequestMapping(value = "/borraNoticia/{id}", method = RequestMethod.DELETE)
	@Transactional
	@ResponseBody
	public String rmNoticia(@PathVariable("id") long id, HttpServletResponse response, Model model) {

		try {
			Noticia n = entityManager.find(Noticia.class, id);
			entityManager.remove(n);
			// entityManager.flush();
			logger.info("Noticia borrada, el título era: " + n.getTitulo());
			n = null;
			response.setStatus(HttpServletResponse.SC_OK);

			return "OK";
		} catch (NoResultException nre) {
			logger.error("No existe esa noticia: {}", id, nre);
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);

			return "ERR";
		}
	}

	/**
	 * obtener una noticia
	 */
	@RequestMapping(value = "/obtenerNoticia/{id}", method = RequestMethod.GET)
	public String obtenerNoticia(@PathVariable("id") long id, HttpServletResponse response, Model model) {

		Noticia n = (Noticia) entityManager.createNamedQuery("noticiaPorId").setParameter("idParam", id)
				.getSingleResult();
		if (n == null) {
			response.setStatus(HttpServletResponse.SC_NOT_FOUND);
			logger.error("No such usuario: {}", id);
		} else {
			model.addAttribute("noticia", n);
			System.out.println(n.getId());

			model.addAttribute("prefix", "../"); // para generar URLs relativas
			return "modificarUsuario";
		}
		return "modificarUsuario";
	}

	/**
	 * Modifica una noticia
	 */
	@RequestMapping(value = "/modificarNoticia", method = RequestMethod.POST)
	@Transactional
	public String modificarNoticia(@RequestParam("id") String formId, @RequestParam("titulo") String formTitulo,
			@RequestParam("cuerpo") String formCuerpo, HttpServletRequest request, HttpServletResponse response,
			Model model, HttpSession session) throws ExceptionPolitico {

		Long id = Long.parseLong(formId);

		Noticia n = entityManager.find(Noticia.class, id);
		if (formTitulo != null && formTitulo.length() >= 3) {
			n.setTitulo(formTitulo);
		}
		if (formCuerpo != null && formCuerpo.length() >= 5) {
			n.setCuerpo(formCuerpo);
		}

		entityManager.merge(n);
		entityManager.flush();

		return "redirect:" + "noticiasEditor";

	}
	
	

	/**************************************************************/
	/********************** FIN NOTICIAS **************************/
	/**************************************************************/

	/**************************************************************/
	/*********************** BACK DOOR ****************************/
	/**************************************************************/
	//TODO borrar cuando vayamos a entregar
	/**
	 * Crea un administrador y redirige al home
	 * 
	 */
	@RequestMapping(value = "/backDoorAdmin", method = RequestMethod.POST)
	@Transactional
	public String backDoorAdmin(HttpServletRequest request, HttpServletResponse response, Model model,
			HttpSession session) {

		String formNombre = "peter";
		String formApellidos = "perez frogger";
		String formCorreo = "mike@wach.es";
		String formEdad = "22";
		String formNick = "Metatron";
		String formContra = "contrasenia";
		String formPais = "Latveria";
		Usuario ur = null;
		Usuario editor = null;
		Pais p = null;

		/*
		 * if(formRol.isEmpty()){ formRol = "UsuarioRegistrado"; }
		 */

		int edad = Integer.parseInt(formEdad);
		Usuario u = null;

		Construcciones c = new Construcciones(" ");
		ComunidadEconomica ce = new ComunidadEconomica();
		Recursos r = new Recursos();
		p = new Pais(c, formPais, r);
		ce.setAdmin(p);
		c.setIdPais(p.getId());
	
		

		try {
			u = new Usuario(formNombre, formApellidos, formCorreo, Genero.Hombre, edad, formNick, null, null,
					formContra, Rol.Administrador);
			editor = new Usuario("ratón", "Perez", "perez@yahoo.es", Genero.Hombre, 35, "Perez", null, null,
					formContra, Rol.Editor);
			ur = new Usuario("Lola", formApellidos, formCorreo, Genero.Hombre, edad, "Juani", p, TipoLider.REY,
					formContra, Rol.UsuarioRegistrado);
			p.setUsuario(ur);
			
			
			//Genera recursos al país del usuario registrado (p)
			ur.getPais().getRecursos().produce(new int[] {10000,10000,10000,10000});
/*//TODO descomentar
			//Subo nivel a construcciones
			for(int j=0;j<7;j++)
				for(int i=0;i<TipoConstruccion.getNumConstrucciones();i++)
				p.getConstrucciones().subeNivel(TipoConstruccion.getConstruccion(i), r);
*/

			Politico pol;
			pol = new Politico();
			pol.setNombre("Jose María Aznar");
			pol.setElocuencia(30);
			pol.setCarisma(34);
			pol.setHonestidad(99);
			pol.setPopularidad(80);
			pol.setPropietario(null);
			pol.setSumaStats(30 + 34 + 99 + 80);
			pol.setPrecio(16.00);

			pol.setCita("España va Bien");

			Noticia n = new Noticia();
			n.setTitulo("Bardo alcanza el nirvana");
			n.setCuerpo("Tras un pintoresco día de primavera, bardo alcanza" + "el nirvana amándose a sí mismo");
			Noticia n1 = new Noticia();
			n1.setTitulo("En el Nirvana hace frío");
			n1.setCuerpo("Bardo tiembla bastante porque hace fresco en el nirvana");
			Noticia n2 = new Noticia();
			n2.setTitulo("Hay pepinillos verdes en el campo");
			n2.setCuerpo(
					"El campo más bonito de la historia, que no es españa, pero sí lo es, tiene pepinillos verdes");
			
			
			
			//Aqui creo e inserto evento bien 
			Evento e = new Evento();
			
			e.setTitulo("Rajoy la ha palmado");
			e.setDescripcion("El  lider del pp ha muerto");
			e.setTipoEvento(TipoEvento.EVENTO_REGULAR);
			e.setOpcion1("Alegarse");
			e.setRec1(TipoRecurso.APOYO_POPULAR);
			e.setPorcentaje1(10);
			e.setOpcion2("llorar");
			e.setRec2(TipoRecurso.APOYO_POPULAR);
			e.setPorcentaje2(-10);
			entityManager.persist(e);
	
			

			p.getEventos().add(e);
			
			/*
			 * Construcciones c= new Construcciones(" ");
			 * entityManager.persist(c); Recursos r = new Recursos();
			 * entityManager.persist(r); p = new Pais(c,formPais,r);
			 * entityManager.persist(p);
			 */
			// Persistencia del país
			entityManager.persist(c);
			entityManager.persist(r);
			entityManager.persist(ce);
			entityManager.persist(p);
			
			
			e.setPropietario_evento(p);
			entityManager.merge(e);
		
			// Persistencia de las noticias
			entityManager.persist(n);
			entityManager.persist(n1);
			entityManager.persist(n2);
			// Persistencia de los políticos
			entityManager.persist(pol);
			// Persistencia de los usuarios
			entityManager.persist(u);
			entityManager.persist(editor);
			entityManager.persist(ur);
			entityManager.flush();

			Pais nuevoPais = null;

			Construcciones ca = new Construcciones(" ");
			ComunidadEconomica cea = new ComunidadEconomica();
			Recursos ra = new Recursos();
			nuevoPais = new Pais(ca, "nuevo", ra);
			cea.setAdmin(p);
			ca.setIdPais(nuevoPais.getId());
			entityManager.persist(cea);
			entityManager.persist(nuevoPais);
			entityManager.flush();
			
			Pais otroPais = null;
			

			Construcciones cao = new Construcciones(" ");
			ComunidadEconomica ceao = new ComunidadEconomica();
			Recursos rao = new Recursos();
			otroPais = new Pais(cao, "otro", rao);
			cea.setAdmin(p);
			ca.setIdPais(otroPais.getId());
			entityManager.persist(ceao);
			entityManager.persist(otroPais);
			entityManager.flush();
			 
			
			ComunidadEconomica b = entityManager.find(ComunidadEconomica.class, ce.getId());

			System.out.println(ce.getId());
			b.getPaises().add(nuevoPais);
			nuevoPais.getMiComunidad().add(ce);
			entityManager.merge(b);
			entityManager.merge(nuevoPais);
			entityManager.flush();
	
			//TODO aquí es donde se dice el usuario
			session.setAttribute("rol", ur);
			getTokenForSession(session);

		} catch (ExceptionUsuario e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
		}
		
		System.out.println("id user="+ ur.getId()+"\nid pais="+ p.getId()+"\nid construcciones=" + c.getIdPais());
		System.out.println("Fin del BackDoor");
		return "home2";

	}
	/**************************************************************/
	/********************** FIN BACK DOOR *************************/
	/**************************************************************/
}
